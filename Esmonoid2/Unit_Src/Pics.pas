Unit Pics;
Interface
Uses
  Sprites,
  Capsules;
Const

  {Estos son los dibujos. SALVAR EN ARCHIVO YA!!!!!!!!!}
  {Cada valor del array equivale a el color que tomara el pixel de esa posicion}
  {El Arkanoid}
	Ark : array [0..(28*10)+1] of byte =
	( 28,10,
	 000,000,000,200,200,200,200,200,000,000,000,000,000,000,000,000,000,000,000,000,200,200,200,200,200,000,000,000,
	 000,000,202,202,202,202,202,081,081,081,081,081,081,081,081,081,081,081,081,081,081,202,202,202,202,202,000,000,
	 000,182,204,204,204,204,204,083,083,083,083,083,083,083,083,083,083,083,083,083,083,204,204,204,204,204,182,000,
	 182,182,207,207,207,207,207,081,081,081,081,081,081,081,081,081,081,081,081,081,081,207,207,207,207,207,182,182,
	 182,178,209,209,209,209,209,079,079,079,079,079,079,079,079,079,079,079,079,079,079,209,209,209,209,209,178,182,
	 178,178,212,212,212,212,212,077,077,077,077,077,077,077,077,077,077,077,077,077,077,212,212,212,212,212,178,178,
	 244,244,211,211,211,211,211,075,075,075,075,075,075,075,075,075,075,075,075,075,075,211,211,211,211,211,244,244,
	 000,244,210,210,210,210,210,073,073,073,073,073,073,073,073,073,073,073,073,073,073,210,210,210,210,210,244,000,
         000,000,209,209,209,209,209,071,071,071,071,071,071,071,071,071,071,071,071,071,071,209,209,209,209,209,000,000,
	 000,000,000,208,208,208,208,208,000,000,000,000,000,000,000,000,000,000,000,000,208,208,208,208,208,000,000,000
  );

  {Tipos de pelotas usadas por el juego}
  Pel : Array [0..(4*4)+1] of byte =
  ( 4,4,
  000,221,218,0,
  221,223,215,210,
  218,215,212,210,
    0,210,210,0
  );

  Pel2 : Array [0..(4*4)+1] of byte =
  ( 4,4,
    0,211,208,0,
  211,213,205,200,
  208,205,202,200,
    0,200,200,0
  );

  {Tipos de ladrillos usados por el juego}
  LadBlack : Array [0..(16*8)+1] of Byte =
  ( 16,8,
    000,229,229,229,229,229,228,228,228,228,227,227,227,227,000,000,
    229,223,229,229,229,229,229,228,228,228,227,227,227,227,227,000,
    229,229,223,229,229,229,229,229,228,228,228,228,227,227,226,001,
    229,229,229,229,229,229,229,229,228,228,228,228,227,226,226,001,
    229,228,228,227,227,227,227,227,227,227,227,226,226,226,226,001,
    228,228,228,228,227,227,227,227,227,227,226,226,226,226,226,001,
    000,228,228,228,228,227,227,227,227,226,226,226,226,226,001,001,
    000,000,001,001,001,001,001,001,001,001,001,001,001,001,001,000
  );

  LadBlue : Array [0..(16*8)+1] of Byte =
  ( 16,8,
      0, 31, 31, 31, 31, 31, 24, 24, 24, 24, 19, 19, 19, 19,  0,  0,
     31,223, 31, 31, 31, 31, 31, 24, 24, 24, 19, 19, 19, 19, 19,  0,
     31, 31,223, 31, 31, 31, 31, 31, 24, 24, 24, 24, 19, 19, 14,  1,
     31, 31, 31, 31, 31, 31, 31, 31, 24, 24, 24, 24, 19, 14, 14,  1,
     31, 24, 24, 19, 19, 19, 19, 19, 19, 19, 19, 14, 14, 14, 14,  1,
     24, 24, 24, 24, 19, 19, 19, 19, 19, 19, 14, 14, 14, 14, 14,  1,
      0, 24, 24, 24, 24, 19, 19, 19, 19, 14, 14, 14, 14, 14,  1,  1,
      0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0
  );

  LadGreen : Array [0..(16*8)+1] of Byte =
  ( 16,8,
      0, 63, 63, 63, 63, 63, 56, 56, 56, 56, 51, 51, 51, 51,  0,  0,
     63,223, 63, 63, 63, 63, 63, 56, 56, 56, 51, 51, 51, 51, 51,  0,
     63, 63,223, 63, 63, 63, 63, 63, 56, 56, 56, 56, 51, 51, 46,  1,
     63, 63, 63, 63, 63, 63, 63, 63, 56, 56, 56, 56, 51, 46, 46,  1,
     63, 56, 56, 51, 51, 51, 51, 51, 51, 51, 51, 46, 46, 46, 46,  1,
     56, 56, 56, 56, 51, 51, 51, 51, 51, 51, 46, 46, 46, 46, 46,  1,
      0, 56, 56, 56, 56, 51, 51, 51, 51, 46, 46, 46, 46, 46,  1,  1,
      0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0
  );

  LadCyan : Array [0..(16*8)+1] of Byte =
  ( 16,8,
      0, 95, 95, 95, 95, 95, 88, 88, 88, 88, 83, 83, 83, 83,  0,  0,
     95,223, 95, 95, 95, 95, 95, 88, 88, 88, 83, 83, 83, 83, 83,  0,
     95, 95,223, 95, 95, 95, 95, 95, 88, 88, 88, 88, 83, 83, 78,  1,
     95, 95, 95, 95, 95, 95, 95, 95, 88, 88, 88, 88, 83, 78, 78,  1,
     95, 88, 88, 83, 83, 83, 83, 83, 83, 83, 83, 78, 78, 78, 78,  1,
     88, 88, 88, 88, 83, 83, 83, 83, 83, 83, 78, 78, 78, 78, 78,  1,
      0, 88, 88, 88, 88, 83, 83, 83, 83, 78, 78, 78, 78, 78,  1,  1,
      0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0
  );

  LadRed : Array [0..(16*8)+1] of Byte =
  ( 16,8,
    000,127,127,127,127,127,120,120,120,120,115,115,115,115,000,000,
    127,223,127,127,127,127,127,120,120,120,115,115,115,115,115,000,
    127,127,223,127,127,127,127,127,120,120,120,120,115,115,110,001,
    127,127,127,127,127,127,127,127,120,120,120,120,115,110,110,001,
    127,120,120,115,115,115,115,115,115,115,115,110,110,110,110,001,
    120,120,120,120,115,115,115,115,115,115,110,110,110,110,110,001,
    000,120,120,120,120,115,115,115,115,110,110,110,110,110,001,001,
    000,000,001,001,001,001,001,001,001,001,001,001,001,001,001,000
  );

  LadYellow : Array [0..(16*8)+1] of Byte =
  ( 16,8,
    000,191,191,191,191,191,184,184,184,184,179,179,179,179,000,000,
    191,223,191,191,191,191,191,184,184,184,179,179,179,179,179,000,
    191,191,223,191,191,191,191,191,184,184,184,184,179,179,174,001,
    191,191,191,191,191,191,191,191,184,184,184,184,179,174,174,001,
    191,184,184,179,179,179,179,179,179,179,179,174,174,174,174,001,
    184,184,184,184,179,179,179,179,179,179,174,174,174,174,174,001,
    000,184,184,184,184,179,179,179,179,174,174,174,174,174,001,001,
    000,000,001,001,001,001,001,001,001,001,001,001,001,001,001,000
  );

  LadViolet: Array [0..(16*8)+1] of Byte =
  ( 16,8,
    000,145,145,145,145,145,138,138,138,138,133,133,133,133,000,000,
    145,223,145,145,145,145,145,138,138,138,133,133,133,133,133,000,
    145,145,223,145,145,145,145,145,138,138,138,138,133,133,128,001,
    145,145,145,145,145,145,145,145,138,138,138,138,133,128,128,001,
    145,138,138,133,133,133,133,133,133,133,133,128,128,128,128,001,
    138,138,138,138,133,133,133,133,133,133,128,128,128,128,128,001,
    000,138,138,138,138,133,133,133,133,128,128,128,128,128,001,001,
    000,000,001,001,001,001,001,001,001,001,001,001,001,001,001,000
  );

  UnBrick : Array [0..(16*8)+1] of Byte =
  ( 16,8,
    191,191,190,189,188,187,186,185,184,183,182,181,180,179,178, 0,
    191, 73, 73, 83, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,177, 1,
    191, 73, 83, 83, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,176, 1,
    190, 77, 83, 77, 77, 77, 77, 77, 77, 77, 77, 77, 83, 83,175, 1,
    189, 83, 77, 77, 77, 77, 77, 77, 77, 77, 77, 83, 73, 73,174, 1,
    188, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 83, 73, 77,173, 1,
    186,185,184,183,182,181,180,179,178,177,176,175,174,173,172, 1,
      0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1

  );

  UnBrick2 : Array [0..(16*8)+1] of Byte =
  ( 16,8,
      0,217,217,217,217,217,217,217,217,217,217,217,217,217,  0, 0,
    210,210,217,217,217,217,217,217,217,217,217,217,217,217,217, 1,
    210,210,223,223,223,223,223,223,223,223,223,223,223,217,217, 1,
    210,210,223,223,223,223,223,223,223,223,223,223,223,217,217, 1,
    210,210,223,223,223,223,223,223,223,223,223,223,223,217,217, 1,
    210,210,210,210,210,210,210,210,210,210,210,210,210,217,217, 1,
      0,210,210,210,210,210,210,210,210,210,210,210,210,210,  1, 1,
      0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1

  );

Var
  Ball     : Array [1..2] of XSprite;
  Arkanoid : XSprite;
  Ladrillo : Array [1..9] of Array [1..400] of Byte;

Procedure GameSpritesInit;

Implementation
Uses
  XBm2;

Procedure GameSpritesInit;
Begin
  {Bricks Init}
  XCompileBitmap (90, LadBlack, Ladrillo[1]);
  XCompileBitmap (90, LadBlue , Ladrillo[2]);
  XCompileBitmap (90, LadGreen, Ladrillo[3]);
  XCompileBitmap (90, LadCyan , Ladrillo[4]);
  XCompileBitmap (90, LadRed  , Ladrillo[5]);
  XCompileBitmap (90, LadYellow,Ladrillo[6]);
  XCompileBitmap (90, LadViolet,Ladrillo[7]);
  XCompileBitmap (90, UnBrick  ,Ladrillo[8]);
  XCompileBitmap (90, UnBrick2 ,Ladrillo[9]);

  XInitSprite (Ball[1]);
  With Ball[1] do
    XCompileBitmap (90, Pel, Sprite[1]);

  XInitSprite (Ball[2]);
  With Ball[2] do
    XCompileBitmap (90, Pel2, Sprite[1]);

  XInitSprite (Arkanoid);
  With Arkanoid do
    XCompileBitmap (90, Ark, Sprite[1]);

{$IFDEF AltCaps}
  XInitCapsule (Capsule[1]);
  With Capsule[1] do begin
    XCompileBitmap (90, Cap1_1, Sprite[1]);
    XCompileBitmap (90, Cap1_1, Sprite[2]);
    XCompileBitmap (90, Cap1_2, Sprite[3]);
    XCompileBitmap (90, Cap1_2, Sprite[4]);
    XCompileBitmap (90, Cap1_3, Sprite[5]);
    XCompileBitmap (90, Cap1_3, Sprite[6]);
    XCompileBitmap (90, Cap1_4, Sprite[7]);
    XCompileBitmap (90, Cap1_4, Sprite[8]);
    XCompileBitmap (90, Cap1_5, Sprite[9]);
    XCompileBitmap (90, Cap1_5, Sprite[10]);
    XCompileBitmap (90, Cap1_6, Sprite[11]);
    XCompileBitmap (90, Cap1_6, Sprite[12]);
    XCompileBitmap (90, Cap1_7, Sprite[13]);
    XCompileBitmap (90, Cap1_7, Sprite[14]);
    LastFrame := 14;
    CurFrame := 1;
    end;

{$ELSE}

  XInitCapsule (Capsule[1]);
  With Capsule[1] do begin
    XCompileBitmap (90, Cap1_1, Sprite[1]);
    XCompileBitmap (90, Cap1_2, Sprite[2]);
    XCompileBitmap (90, Cap1_3, Sprite[3]);
    XCompileBitmap (90, Cap1_4, Sprite[4]);
    XCompileBitmap (90, Cap1_5, Sprite[5]);
    XCompileBitmap (90, Cap1_6, Sprite[6]);
    XCompileBitmap (90, Cap1_7, Sprite[7]);
    XCompileBitmap (90, Cap1_8, Sprite[8]);
    XCompileBitmap (90, Cap1_9, Sprite[9]);
    XCompileBitmap (90, Cap1_10, Sprite[10]);
    LastFrame := 10;
    CurFrame := 1;
    end;

{$ENDIF}

  XInitCapsule (Capsule[2]);
  With Capsule[2] do begin
    XCompileBitmap (90, Cap2_1, Sprite[1]);
    XCompileBitmap (90, Cap2_2, Sprite[2]);
    XCompileBitmap (90, Cap2_3, Sprite[3]);
    XCompileBitmap (90, Cap2_4, Sprite[4]);
    XCompileBitmap (90, Cap2_5, Sprite[5]);
    XCompileBitmap (90, Cap2_6, Sprite[6]);
    XCompileBitmap (90, Cap2_7, Sprite[7]);
    XCompileBitmap (90, Cap2_8, Sprite[8]);
    XCompileBitmap (90, Cap2_9, Sprite[9]);
    XCompileBitmap (90, Cap2_10, Sprite[10]);
    LastFrame := 10;
    CurFrame := 1;
    end;

  XInitCapsule (Capsule[3]);
  With Capsule[3] do begin
    XCompileBitmap (90, Cap3_1, Sprite[1]);
    XCompileBitmap (90, Cap3_2, Sprite[2]);
    XCompileBitmap (90, Cap3_3, Sprite[3]);
    XCompileBitmap (90, Cap3_4, Sprite[4]);
    XCompileBitmap (90, Cap3_5, Sprite[5]);
    XCompileBitmap (90, Cap3_6, Sprite[6]);
    XCompileBitmap (90, Cap3_7, Sprite[7]);
    XCompileBitmap (90, Cap3_8, Sprite[8]);
    XCompileBitmap (90, Cap3_9, Sprite[9]);
    XCompileBitmap (90, Cap3_10, Sprite[10]);
    LastFrame := 10;
    CurFrame := 1;
    end;

  XInitCapsule (Capsule[4]);
  With Capsule[4] do begin
    XCompileBitmap (90, Cap4_1, Sprite[1]);
    XCompileBitmap (90, Cap4_2, Sprite[2]);
    XCompileBitmap (90, Cap4_3, Sprite[3]);
    XCompileBitmap (90, Cap4_4, Sprite[4]);
    XCompileBitmap (90, Cap4_5, Sprite[5]);
    XCompileBitmap (90, Cap4_6, Sprite[6]);
    XCompileBitmap (90, Cap4_7, Sprite[7]);
    XCompileBitmap (90, Cap4_8, Sprite[8]);
    XCompileBitmap (90, Cap4_9, Sprite[9]);
    XCompileBitmap (90, Cap4_10, Sprite[10]);
    LastFrame := 10;
    CurFrame := 1;
    end;

End;

End.