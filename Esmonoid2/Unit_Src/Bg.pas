Unit Bg;
interface

Procedure Draw_BackGround;
Procedure Bg_Draw (Beg : Word);

implementation

Uses
 crt,
 xlib2,
 xbm2,
 palette;

Const
  Backg1 : Array [0..513] of Byte =
  (32,16,
  69,69,73,73,73,73,73,73,73,73,73,73,73,73,88,88,88,88,80,80,80,80,80,80,80,80,80,80,80,80,69,69,
  69,69,69,69,73,73,73,73,73,73,73,73,88,88,88,88,88,88,88,88,80,80,80,80,80,80,80,80,69,69,69,69,
  69,69,69,69,69,69,73,73,73,73,88,88,88,88,88,88,88,88,88,88,88,88,80,80,80,80,69,69,69,69,69,69,
  69,69,69,69,69,69,69,69,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,69,69,69,69,69,69,69,69,
  69,69,69,69,69,69,80,80,80,80,88,88,88,88,88,88,88,88,88,88,88,88,73,73,73,73,69,69,69,69,69,69,
  69,69,69,69,80,80,80,80,80,80,80,80,88,88,88,88,88,88,88,88,73,73,73,73,73,73,73,73,69,69,69,69,
  69,69,80,80,80,80,80,80,80,80,80,80,80,80,88,88,88,88,73,73,73,73,73,73,73,73,73,73,73,73,69,69,
  80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,
  88,88,80,80,80,80,80,80,80,80,80,80,80,80,69,69,69,69,73,73,73,73,73,73,73,73,73,73,73,73,88,88,
  88,88,88,88,80,80,80,80,80,80,80,80,69,69,69,69,69,69,69,69,73,73,73,73,73,73,73,73,88,88,88,88,
  88,88,88,88,88,88,80,80,80,80,69,69,69,69,69,69,69,69,69,69,69,69,73,73,73,73,88,88,88,88,88,88,
  88,88,88,88,88,88,88,88,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,88,88,88,88,88,88,88,88,
  88,88,88,88,88,88,73,73,73,73,69,69,69,69,69,69,69,69,69,69,69,69,80,80,80,80,88,88,88,88,88,88,
  88,88,88,88,73,73,73,73,73,73,73,73,69,69,69,69,69,69,69,69,80,80,80,80,80,80,80,80,88,88,88,88,
  88,88,73,73,73,73,73,73,73,73,73,73,73,73,69,69,69,69,80,80,80,80,80,80,80,80,80,80,80,80,88,88,
  73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80
  );

  BackG2 : Array [0..(36*27)+1] of byte =
  (36,27,
  85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,85,
  85,73,85,69,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,85,69,73,69,85,
  85,73,69,69,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,69,73,69,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,59,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,80,80,80,80,80,80,80,80,80,80,80,80,75,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,88,80,80,80,80,80,80,80,80,80,80,75,69,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,88,69,73,73,73,73,73,73,73,73,73,88,69,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,88,69,69,73,73,73,73,73,73,73,88,88,69,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,88,69,69,69,73,73,73,73,73,88,88,88,69,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,88,69,69,69,69,73,73,73,88,88,88,88,69,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,88,69,69,69,69,80,80,80,88,88,88,88,69,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,88,69,69,69,80,80,80,80,80,88,88,88,69,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,88,69,69,80,80,80,80,80,80,80,88,88,69,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,88,69,80,80,80,80,80,80,80,80,80,88,69,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,88,80,73,73,73,73,73,73,73,73,73,73,69,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,63,88,80,73,73,73,73,73,73,73,73,73,73,73,73,69,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,59,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,85,
  85,73,85,69,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,85,69,73,69,85,
  85,73,69,69,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,69,73,69,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,85,
  85,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,85,
  85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85
  );

  BackG3 : Array [0..(32*16)+1] of byte =
  (32,16,
  88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,80,76,
  88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,80,76,69,
  88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,80,76,69,69,
  88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,76,69,69,69,
  88,88,88,88,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,77,69,69,69,69,
  88,88,88,88,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,77,73,69,69,69,69,
  88,88,88,88,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,77,73,73,69,69,69,69,
  88,88,88,88,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,77,73,73,73,69,69,69,69,
  88,88,88,88,80,80,80,77,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,69,69,69,
  88,88,88,88,80,80,77,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,69,69,69,
  88,88,88,88,80,77,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,69,69,69,
  88,88,88,88,77,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,69,69,69,69,
  88,88,88,80,76,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,
  88,88,80,76,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,
  88,80,76,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,
  80,76,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69
  );

  BackG4 : Array [0..(36*27)+1] of byte =
  (36,27,
  85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,85,
  85,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,
  85,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,85,
  85,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,
  85,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,85,
  85,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,
  85,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,85,
  85,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,
  85,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,85,
  85,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,
  85,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,85,
  85,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,
  85,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,85,
  85,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,
  85,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,85,
  85,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,69,73,85,
  85,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,69,69,73,85,
  85,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,85,
  85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85
  );

  Puntos : Array [0..(48*5)+1] of byte =
  (48,5,
  223,223,223,223,223,223,000,000,223,000,000,000,000,000,223,000,223,223,000,000,000,000,223,000,223,223,223,223,223,223,223,
  000,000,223,223,223,223,223,000,000,000,223,223,223,223,223,223,000,
  223,000,000,000,000,000,223,000,223,000,000,000,000,000,223,000,223,000,223,000,000,000,223,000,000,000,000,223,000,000,000,
  000,223,000,000,000,000,000,223,000,223,000,000,000,000,000,000,000,
  223,223,223,223,223,223,000,000,223,000,000,000,000,000,223,000,223,000,000,223,000,000,223,000,000,000,000,223,000,000,000,
  000,223,000,000,000,000,000,223,000,000,223,223,223,223,223,000,000,
  223,000,000,000,000,000,000,000,223,000,000,000,000,000,223,000,223,000,000,000,223,000,223,000,000,000,000,223,000,000,000,
  000,223,000,000,000,000,000,223,000,000,000,000,000,000,000,223,000,
  223,000,000,000,000,000,000,000,000,223,223,223,223,223,000,000,223,000,000,000,000,223,223,000,000,000,000,223,000,000,000,
  000,000,223,223,223,223,223,000,000,223,223,223,223,223,223,000,000
  );

  Vidas : Array [0..(40*5)+1] of byte =
  (40,5,
  223,000,000,000,000,000,223,000,223,223,223,223,223,223,223,000,223,223,223,223,223,223,000,000,000,223,223,223,223,223,000,
  000,000,223,223,223,223,223,223,000,
  223,000,000,000,000,000,223,000,000,000,000,223,000,000,000,000,223,000,000,000,000,000,223,000,223,000,000,000,000,000,223,
  000,223,000,000,000,000,000,000,000,
  000,223,000,000,000,223,000,000,000,000,000,223,000,000,000,000,223,000,000,000,000,000,223,000,223,223,223,223,223,223,223,
  000,000,223,223,223,223,223,000,000,
  000,000,223,000,223,000,000,000,000,000,000,223,000,000,000,000,223,000,000,000,000,000,223,000,223,000,000,000,000,000,223,
  000,000,000,000,000,000,000,223,000,
  000,000,000,223,000,000,000,000,223,223,223,223,223,223,223,000,223,223,223,223,223,223,000,000,223,000,000,000,000,000,223,
  000,223,223,223,223,223,223,000,000
  );

  Borde1 : Array [0..9] of Byte =
  (8,1,
  205,210,215,220,215,210,205,000
  );

  Borde2 : Array [0..8] of Byte =
  (1,7,
  205,
  210,
  215,
  220,
  215,
  210,
  205
  );

  Borde_Union : Array [0..(8*8)+1] of byte =
  (8,8,
  215,215,215,215,215,215,215,215,
  223,215,215,215,215,215,215,197,
  223,223,215,215,215,215,197,197,
  223,223,223,215,215,197,197,197,
  223,223,223,204,204,197,197,197,
  223,223,204,204,204,204,197,197,
  223,204,204,204,204,204,204,197,
  204,204,204,204,204,204,204,204
  );

Var
  Largo,
  Alto,
  X,Y,
  I,J : Integer;
  BackGrnd : Pointer;

Procedure Bg_Draw;
var
  j,x,i : word;
begin
  J := 09;
  X := 1;
  For I := 0 to 200 do begin
    XLine (Beg,I,320,I,J,0);
     If X = 1 then
       begin
         inc(j);
         if J = 31 then begin
           X := 2;
           end;
       end
     else
       begin
         dec(j);
         if J = 09 then begin
           X := 1;
           end;
       end;
     end;
end;

Procedure Draw_BackGround;
begin
  randomize;
  getmem (BackGrnd,2500);
  case random(4)+1 of
  1 : begin XCompileBitmap (90,Backg1,BackGrnd^); Largo := 32; Alto := 16; end;
  2 : begin XCompileBitmap (90,Backg2,BackGrnd^); Largo := 35; Alto := 26; end;
  3 : begin XCompileBitmap (90,Backg3,BackGrnd^); Largo := 32; Alto := 16; end;
  4 : begin XCompileBitmap (90,Backg4,BackGrnd^); Largo := 32; Alto := 26; end;
  end;
  X := 0;
  Y := 0;
  For I := 1 to 13 do begin
    For J := 1 to 8 do begin
     XPutCBitmap (X,Y,0,BackGrnd^);
     Inc (X,Largo);
     end;
    X := 0;
    Inc (Y,Alto);
  end;

  XCpVIdRect (0,0,243,200, 0,0, 0,NonVisualOffs, 360,360);
  XRectFill (242,0,320,200, 0,1);
  Bg_Draw (242);
  XCpVIdRect (242,0,320,200, 242,0, 0,Page1Offs, 360,360);
  XCpVidRect (0,0,242,200,   0,0,   0,Page1Offs, 360,360);

  XCompileBitmap (90,Puntos,BackGrnd^);
  XPutCBitmap (257,20,0,BackGrnd^);

  XCompileBitmap (90,Vidas,BackGrnd^);
  XPutCBitmap (260,50,0,BackGrnd^);

  XCompileBitmap (90,Borde1,BackGrnd^);
  For I := 1 to 198 do begin
    XPutCBitmap (242,I,0,BackGrnd^);
    XPutCBitmap (313,I,0,BackGrnd^);
    end;

  XCompileBitmap (90,Borde2,BackGrnd^);
  For I := 249 to 312 do begin
    XPutCBitmap (I,0,0,BackGrnd^);
    XPutCBitmap (I,193,0,BackGrnd^);
    end;

  XCompileBitmap (90,Borde_Union,BackGrnd^);
  XPutCBitmap (242,0,0,BackGrnd^);
  XPutCBitmap (312,0,0,BackGrnd^);
  XPutCBitmap (242,192,0,BackGrnd^);
  XPutCBitmap (312,192,0,BackGrnd^);

  FreeMem (BackGrnd,2500);
End;

end.